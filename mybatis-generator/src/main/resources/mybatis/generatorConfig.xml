<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC
        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <properties resource="dataSource.properties"/>
    <!--  <classPathEntry location="${generator.location}"/>-->
    <context id="MysqlTables" targetRuntime="MyBatis3">

        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"></plugin>
        <!-- Java模型生成equals和hashcode方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"></plugin>
        <!-- 生成的pojo，将implements Serializable-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- 阻止生成自动注释 -->
        <commentGenerator>
            <property name="javaFileEncoding" value="UTF-8"/>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>



        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
        </jdbcConnection>

        <!--指定生成的类型为java类型，避免数据库中number等类型字段 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--自动生成的实体的存放包路径 -->
        <javaModelGenerator targetPackage="${entityLocation}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--自动生成的*Mapper.xml文件存放路径 -->
        <sqlMapGenerator targetPackage="${mapperXmlLocation}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!--自动生成的*Mapper.java存放路径 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${mapperLocation}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>


        <!--******************************************* table begin***********************************************-->
        <!-- 可以多个表同时生成 -->
        <!--
            schema即为数据库名 tableName为对应的数据库表
            domainObjectName是要生成的实体类
             enable*ByExample 是否生成example类
             -->
        <!--
        <table schema=""
                tableName="user"
                domainObjectName="User"
                enableCountByExample="false"
                enableUpdateByExample="false"
                enableDeleteByExample="false"
                enableSelectByExample="false"
                selectByExampleQueryId="false"
            >

            注意，该属性只针对MyBatis3Simple有用；
            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，
            如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；
            <property name="selectAllOrderByClause" value="id desc"/>


            用于指定生成实体类时是否使用实际的列名作为实体类的属性名
            true:使用数据库中实际的字段名字作为生成的实体类的属性名
            false:默认值,转换为Camel Case风格作为生成的实体类的属性名
            <property name="useActualColumnNames" value="true" />
        </table>
         -->


        <!--生成以后，将下面代码注释，因为再误点一次会报错-->
        <table schema="" tableName="article"
               domainObjectName="Article"
               enableCountByExample="true"
               enableUpdateByExample="true"
               enableDeleteByExample="true"
               enableSelectByExample="true"
               selectByExampleQueryId="true">
            <property name="selectAllOrderByClause" value="id desc"/>
            <property name="useActualColumnNames" value="false" />
            <!--
                指定映射类型
            -->
<!--            <columnOverride column="content" javaType="java.lang.String" jdbcType="VARCHAR"/>-->
        </table>

       <!--******************************************* table end************************************************-->


        <!--

            选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
            1，SQL map文件
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample,deleteByExample），可选；
            6，Mapper接口（可选）
            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；
 

           可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性


           注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
   
        -->

        <!--
            generatedKey:用于生成生成主键的方法，如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
                column:主键的列名；
                sqlStatement:要生成的selectKey语句，有以下可选项：
                    Cloudscape  :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                    DB2         :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                    DB2_MF      :相当于selectKey的SQL为： SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                    Derby       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                    HSQLDB      :相当于selectKey的SQL为： CALL IDENTITY()
                    Informix    :相当于selectKey的SQL为： SELECT dbinfo('sqlca.sqlerrd1') FROM systables WHERE tabid=1
                    MySql       :相当于selectKey的SQL为： SELECT LAST_INSERT_ID()
                    SqlServer   :相当于selectKey的SQL为： SELECT SCOPE_IDENTITY()
                    SYBASE      :相当于selectKey的SQL为： SELECT @@IDENTITY
                    JDBC        :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
        -->

        <!--
            columnOverride:用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
                column:要重新设置的列名；
                javaType:用于指定生成的domain的属性类型，使用类型的全限定名
                jdbcType:用于指定该列的JDBC类型
                typeHandler:用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
                delimitedColumnName:设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false
                    注意，一个table元素中可以有多个columnOverride元素哈~
         -->

        <!--
            ignoreColumn:设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
                column:指定要忽略的列的名字；
        -->

    </context>
</generatorConfiguration>